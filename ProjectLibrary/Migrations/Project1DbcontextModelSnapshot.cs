// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ProjectLibrary.Build.Service;

#nullable disable

namespace ProjectLibrary.Migrations
{
    [DbContext(typeof(Project1Dbcontext))]
    partial class Project1DbcontextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ProjectLibrary.Build.Data.Calculator", b =>
                {
                    b.Property<int>("CalculatorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CalculatorId"));

                    b.Property<DateOnly>("CalculationDate")
                        .HasColumnType("date");

                    b.Property<double>("FirstNum")
                        .HasColumnType("float");

                    b.Property<string>("Operator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Result")
                        .HasColumnType("float");

                    b.Property<double>("SecondNum")
                        .HasColumnType("float");

                    b.HasKey("CalculatorId");

                    b.ToTable("Calculators");
                });

            modelBuilder.Entity("ProjectLibrary.Build.Data.RPS", b =>
                {
                    b.Property<int>("RockPaperScissorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RockPaperScissorId"));

                    b.Property<string>("ComputerMove")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly>("GameDate")
                        .HasColumnType("date");

                    b.Property<string>("PlayerMove")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Result")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RockPaperScissorId");

                    b.ToTable("RockPaperScissor");
                });

            modelBuilder.Entity("ProjectLibrary.Build.Data.ShapeGame", b =>
                {
                    b.Property<int>("ShapeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ShapeId"));

                    b.Property<double>("Area")
                        .HasColumnType("float");

                    b.Property<int>("Base")
                        .HasColumnType("int");

                    b.Property<int>("CathetusOne")
                        .HasColumnType("int");

                    b.Property<int>("CathetusTwo")
                        .HasColumnType("int");

                    b.Property<double>("Circumference")
                        .HasColumnType("float");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<int>("Height")
                        .HasColumnType("int");

                    b.Property<int>("Hypotenuse")
                        .HasColumnType("int");

                    b.Property<string>("ShapeForm")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ShapeId");

                    b.ToTable("Shapes");
                });
#pragma warning restore 612, 618
        }
    }
}
